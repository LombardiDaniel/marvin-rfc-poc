#!/usr/bin/env python3
#fazer o merge do main.py

import os
from tabnanny import check

import click

from marvin.utils.project import ProjectTools
from marvin.dsl import Parser
from marvin.dsl import Renderer
from marvin.utils import generate_project, make_tarball
from marvin.utils import check_marvin_package, get_project_name
from marvin.utils import Config, Utils


MARVIN_PATH = os.getenv('MARVIN_PATH', '~/usr/bin/marvin')
USR_TEMPLATES_DIR = os.path.join(MARVIN_PATH, 'marvin/templates/project')
MARVIN_TEMPLATE_OPTIONS = os.listdir(USR_TEMPLATES_DIR)

#if __name__ == "__main__":
#    with open('pipeline.yaml') as f:
#        yaml_s = yaml.safe_load(f.read())
#        p = Parser(user_defined_yaml=yaml_s)
#        r = Renderer(p.yaml, 'untitled')
#        r.parsed_yaml
#        r.render('pipe.py')

@click.group()
@click.version_option()
def cli():
    """
    Marvin DSL PoC
    """


#generate
@cli.group()
def project():
    """Manages projects."""


@project.command("generate")
@click.option('-v', '--verbose', is_flag=True, default=False)
@click.option(
    '--project_dir',
    type=click.Path(exists=True),
    default=os.getcwd()
)
@click.option(
    '--name',
    '-n',
    help='Project name.',
    type=str
)
@click.option(
    '--version',
    '-v',
    default='0.0.1',
    help='Initial version.',
    type=str
)
def generate(project_dir, verbose, template, name, force_overwrite, version):
    # generate_project(name, version, os.getcwd())
    # TODO: template n ta sendo utilizado
    project_name = Utils.clean_dirname(name)

    m = ProjectTools(os.getcwd())
    m.init_project(name, version)


@cli.command("compile")
@click.option(
    '-f',
    '--pipeline-file',
    type=click.Path(exists=True),
    default='pipeline.yaml'
)
@click.option('-v', '--verbose', is_flag=True, default=False)
@click.option('-d', '--debug', is_flag=True, default=False)
def compile(pipeline_file, verbose, debug):
    """
    Compiles the pipeline.
    """

    m = ProjectTools(os.getcwd())
    m.compile_pipeline(pipeline_file, verbose, debug)


@cli.command("incremental_create_storage_bucket")
@click.option(
    '-f',
    '--pipeline-file',
    type=click.Path(exists=True),
    default='pipeline.yaml'
)
@click.option('-v', '--verbose', is_flag=True, default=False)
@click.option('-d', '--debug', is_flag=True, default=False)
def incremental_create_storage_bucket(pipeline_file, verbose, debug):
    '''
    '''

    m = ProjectTools(os.getcwd())
    m.create_bucket(pipeline_file, verbose, debug)


@cli.command("incremental_prepare_env")
@click.option(
    '-f',
    '--pipeline-file',
    type=click.Path(exists=True),
    default='pipeline.yaml'
)
@click.option('-v', '--verbose', is_flag=True, default=False)
@click.option('-d', '--debug', is_flag=True, default=False)
def incremental_prepare_env(pipeline_file, verbose, debug):
    '''
    '''

    m = ProjectTools(os.getcwd())
    m.prepare_env(pipeline_file, verbose, debug)


@cli.command()
@click.option(
    '-f',
    '--pipeline-file',
    type=click.Path(exists=True),
    default='pipeline.yaml'
)
@click.option('-v', '--verbose', is_flag=True, default=False)
@click.option('-d', '--debug', is_flag=True, default=False)
def incremental_crete_run(pipeline_file, verbose, debug):
    '''
    '''

    m = ProjectTools(os.getcwd())
    m.create_run(pipeline_file, verbose, debug)



@cli.command("incremental_crete_recurring_run")
@click.option(
    '-f',
    '--pipeline-file',
    type=click.Path(exists=True),
    default='pipeline.yaml'
)
@click.option('-v', '--verbose', is_flag=True, default=False)
@click.option('-d', '--debug', is_flag=True, default=False)
def incremental_crete_recurring_run(pipeline_file, verbose, debug):
    '''
    '''

    m = ProjectTools(os.getcwd())
    m.create_recurring_run(pipeline_file, verbose, debug)


@cli.command("compile_and_run")
@click.option(
    '-f',
    '--pipeline-file',
    type=click.Path(exists=True),
    default='pipeline.yaml'
)
@click.option('-v', '--verbose', is_flag=True, default=False)
@click.option('-d', '--debug', is_flag=True, default=False)
def compile_and_run(pipeline_file, verbose, debug):
    '''
    '''

    m = ProjectTools(os.getcwd())
    m.compile_pipeline(pipeline_file, verbose, debug)
    m.create_bucket(pipeline_file, verbose, debug)
    m.prepare_env(pipeline_file, verbose, debug)
    m.create_run(pipeline_file, verbose, debug)
    m.create_recurring_run(pipeline_file, verbose, debug)


@project.command("run")
def run():
    base_path = os.getcwd()
    if check_marvin_package(base_path):
        project_name = get_project_name(base_path)
        make_tarball(project_name, base_path)
    else:
        conf = Config()
        print(conf.kfp_url)


project()
